const mongodb = require('mongodb');

// Configura√ß√£o do banco (ajustar conforme necess√°rio)
const config = {
    mongo: {
        host: 'localhost',
        port: 27017,
        dbname: 'tvi'
    }
};

const createIndexes = async () => {
    const Db = mongodb.Db;
    const Server = mongodb.Server;
    
    const db = new Db(config.mongo.dbname, 
        new Server(config.mongo.host, config.mongo.port, {'auto_reconnect': true}),
        {safe: true}
    );

    try {
        await new Promise((resolve, reject) => {
            db.open((err) => {
                if (err) reject(err);
                else resolve();
            });
        });

        console.log('Conectado ao MongoDB');

        // √çndices para a cole√ß√£o campaigns
        console.log('Criando √≠ndices para a cole√ß√£o campaigns...');
        const campaignCollection = await new Promise((resolve, reject) => {
            db.collection('campaign', (err, collection) => {
                if (err) reject(err);
                else resolve(collection);
            });
        });

        // O √≠ndice _id j√° existe automaticamente, n√£o precisa criar
        
        // √çndice para consultas de listagem ordenadas por data de cria√ß√£o
        await campaignCollection.createIndex({ createdAt: -1 });
        console.log('‚úì √çndice criado: campaigns.createdAt (desc)');
        
        // √çndice para prioridade de cache
        await campaignCollection.createIndex({ cachePriority: 1 });
        console.log('‚úì √çndice criado: campaigns.cachePriority');

        // √çndice para consultas por status/tipo se houver
        if (await hasField(campaignCollection, 'status')) {
            await campaignCollection.createIndex({ status: 1 });
            console.log('‚úì √çndice criado: campaigns.status');
        }

        // √çndices para a cole√ß√£o points
        console.log('\nCriando √≠ndices para a cole√ß√£o points...');
        const pointsCollection = await new Promise((resolve, reject) => {
            db.collection('points', (err, collection) => {
                if (err) reject(err);
                else resolve(collection);
            });
        });

        // √çndice principal para consultas por campanha (muito usado)
        await pointsCollection.createIndex({ campaign: 1 });
        console.log('‚úì √çndice criado: points.campaign');

        // √çndice para consultas de progresso (contagem de userName)
        await pointsCollection.createIndex({ campaign: 1, userName: 1 });
        console.log('‚úì √çndice criado: points.campaign + userName');

        // √çndice para consultas geoespaciais se necess√°rio
        await pointsCollection.createIndex({ 
            campaign: 1, 
            lat: 1, 
            lon: 1 
        });
        console.log('‚úì √çndice criado: points.campaign + lat + lon');

        // √çndice para consultas por status de inspe√ß√£o
        await pointsCollection.createIndex({ 
            campaign: 1, 
            underInspection: 1 
        });
        console.log('‚úì √çndice criado: points.campaign + underInspection');

        // √çndice para pagina√ß√£o de pontos
        await pointsCollection.createIndex({ 
            campaign: 1, 
            index: 1 
        });
        console.log('‚úì √çndice criado: points.campaign + index');

        // √çndice para consultas por data de importa√ß√£o
        await pointsCollection.createIndex({ 
            campaign: 1, 
            dateImport: -1 
        });
        console.log('‚úì √çndice criado: points.campaign + dateImport (desc)');

        // √çndice para consultas por regi√£o geogr√°fica
        await pointsCollection.createIndex({ 
            biome: 1, 
            uf: 1, 
            county: 1 
        });
        console.log('‚úì √çndice criado: points.biome + uf + county');

        // √çndice para consultas por path e row (tiles Landsat)
        await pointsCollection.createIndex({ 
            campaign: 1, 
            path: 1, 
            row: 1 
        });
        console.log('‚úì √çndice criado: points.campaign + path + row');

        // √çndices para a cole√ß√£o users (se existir)
        console.log('\nCriando √≠ndices para a cole√ß√£o users...');
        const usersCollection = await new Promise((resolve, reject) => {
            db.collection('users', (err, collection) => {
                if (err) {
                    console.log('Cole√ß√£o users n√£o encontrada, pulando...');
                    resolve(null);
                } else {
                    resolve(collection);
                }
            });
        });

        if (usersCollection) {
            // √çndice √∫nico para username
            await usersCollection.createIndex({ username: 1 }, { unique: true });
            console.log('‚úì √çndice criado: users.username (unique)');

            // √çndice para consultas por role
            await usersCollection.createIndex({ role: 1 });
            console.log('‚úì √çndice criado: users.role');

            // √çndice composto para autentica√ß√£o
            await usersCollection.createIndex({ username: 1, role: 1 });
            console.log('‚úì √çndice criado: users.username + role');
        }

        console.log('\nüéâ Todos os √≠ndices foram criados com sucesso!');
        
        // Mostrar estat√≠sticas dos √≠ndices
        console.log('\nüìä Estat√≠sticas dos √≠ndices:');
        await showIndexStats(campaignCollection, 'campaigns');
        await showIndexStats(pointsCollection, 'points');
        if (usersCollection) {
            await showIndexStats(usersCollection, 'users');
        }

    } catch (error) {
        console.error('Erro ao criar √≠ndices:', error);
    } finally {
        db.close();
    }
};

// Fun√ß√£o auxiliar para verificar se um campo existe na cole√ß√£o
const hasField = async (collection, fieldName) => {
    try {
        const sample = await collection.findOne({});
        return sample && sample.hasOwnProperty(fieldName);
    } catch (error) {
        return false;
    }
};

// Fun√ß√£o auxiliar para mostrar estat√≠sticas dos √≠ndices
const showIndexStats = async (collection, collectionName) => {
    try {
        const indexes = await collection.indexes();
        console.log(`\n${collectionName.toUpperCase()}:`);
        indexes.forEach(index => {
            const keyStr = Object.keys(index.key).map(k => 
                `${k}:${index.key[k]}`
            ).join(', ');
            console.log(`  - ${index.name}: {${keyStr}}`);
        });
    } catch (error) {
        console.log(`Erro ao obter estat√≠sticas de ${collectionName}:`, error.message);
    }
};

// Executar se chamado diretamente
if (require.main === module) {
    createIndexes().then(() => {
        console.log('\n‚úÖ Script de cria√ß√£o de √≠ndices finalizado');
        process.exit(0);
    }).catch((error) => {
        console.error('‚ùå Erro:', error);
        process.exit(1);
    });
}

module.exports = createIndexes;