// Script para otimizar consultas espec√≠ficas do sistema TVI
// Cont√©m √≠ndices adicionais baseados nos padr√µes de uso identificados

print("Iniciando otimiza√ß√µes avan√ßadas...");

// Conectar ao banco
db = db.getSiblingDB('tvi');

print("Criando √≠ndices compostos otimizados para consultas frequentes...");

// √çndice otimizado para consulta de progresso de campanhas
// Usado em: CampaignCrud.list() para calcular totalPoints e completedPoints
try {
    db.points.createIndex({ 
        "campaign": 1, 
        "userName": 1 
    }, { 
        name: "campaign_progress_optimized",
        background: true 
    });
    print("‚úì √çndice otimizado: points.campaign + userName (para progresso)");
} catch (e) {
    print("Erro ou j√° existe:", e.message);
}

// √çndice para consultas de pagina√ß√£o eficiente na listagem de campanhas
try {
    db.campaign.createIndex({ 
        "createdAt": -1,
        "_id": -1 
    }, { 
        name: "campaign_pagination_optimized",
        background: true 
    });
    print("‚úì √çndice otimizado: campaigns.createdAt + _id (para pagina√ß√£o)");
} catch (e) {
    print("Erro ou j√° existe:", e.message);
}

// √çndice sparse para campanhas com arquivos GeoJSON
try {
    db.campaign.createIndex({ 
        "geojsonFile": 1 
    }, { 
        name: "campaign_geojson_sparse",
        sparse: true,
        background: true 
    });
    print("‚úì √çndice sparse: campaigns.geojsonFile");
} catch (e) {
    print("Erro ou j√° existe:", e.message);
}

// √çndice para consultas de pontos por status de cache
try {
    db.points.createIndex({ 
        "campaign": 1,
        "cached": 1,
        "enhance_in_cache": 1
    }, { 
        name: "points_cache_status",
        background: true 
    });
    print("‚úì √çndice otimizado: points.campaign + cached + enhance_in_cache");
} catch (e) {
    print("Erro ou j√° existe:", e.message);
}

// √çndice para consultas geoespaciais avan√ßadas
try {
    db.points.createIndex({ 
        "campaign": 1,
        "biome": 1,
        "uf": 1,
        "countyCode": 1
    }, { 
        name: "points_geographic_hierarchy",
        background: true 
    });
    print("‚úì √çndice hier√°rquico: points.campaign + biome + uf + countyCode");
} catch (e) {
    print("Erro ou j√° existe:", e.message);
}

// √çndice para inspe√ß√µes ativas
try {
    db.points.createIndex({ 
        "campaign": 1,
        "underInspection": 1,
        "userName": 1
    }, { 
        name: "points_active_inspections",
        background: true 
    });
    print("‚úì √çndice otimizado: points.campaign + underInspection + userName");
} catch (e) {
    print("Erro ou j√° existe:", e.message);
}

// Configurar op√ß√µes de performance para as cole√ß√µes
print("\nOtimizando configura√ß√µes de performance...");

// Verificar se h√° estat√≠sticas de uso para otimizar
try {
    print("\nüìä An√°lise de uso das cole√ß√µes:");
    
    var campaignStats = db.campaign.stats();
    print("Campaigns - Tamanho: " + (campaignStats.size / 1024).toFixed(2) + " KB");
    print("Campaigns - √çndices: " + (campaignStats.totalIndexSize / 1024).toFixed(2) + " KB");
    
    var pointsStats = db.points.stats();
    print("Points - Tamanho: " + (pointsStats.size / 1024).toFixed(2) + " KB");
    print("Points - √çndices: " + (pointsStats.totalIndexSize / 1024).toFixed(2) + " KB");
    
} catch (e) {
    print("Erro ao obter estat√≠sticas:", e.message);
}

// Sugest√µes de otimiza√ß√£o baseadas no c√≥digo analisado
print("\nüí° Sugest√µes de otimiza√ß√£o implementadas:");
print("1. √çndice composto campaign + userName para c√°lculos de progresso r√°pidos");
print("2. √çndice de pagina√ß√£o otimizado para listagem de campanhas");
print("3. √çndice sparse para campanhas com arquivos GeoJSON");
print("4. √çndice para status de cache dos pontos");
print("5. √çndice hier√°rquico geogr√°fico para filtros regionais");
print("6. √çndice para inspe√ß√µes ativas");

print("\n‚ö° Dicas de performance para as consultas:");
print("‚Ä¢ Use .limit() em todas as consultas paginadas");
print("‚Ä¢ Evite .count() em cole√ß√µes grandes, use .estimatedDocumentCount()");
print("‚Ä¢ Use proje√ß√£o para retornar apenas campos necess√°rios");
print("‚Ä¢ Para consultas $where, considere reescrever usando operadores nativos");

print("\nüéØ Consultas mais otimizadas agora:");
print("‚Ä¢ Listagem paginada de campanhas ordenada por data");
print("‚Ä¢ Contagem de pontos por campanha");
print("‚Ä¢ C√°lculo de progresso de campanhas");
print("‚Ä¢ Consultas geogr√°ficas por regi√£o");
print("‚Ä¢ Filtros por status de inspe√ß√£o");

print("\n‚úÖ Otimiza√ß√µes conclu√≠das com sucesso!");